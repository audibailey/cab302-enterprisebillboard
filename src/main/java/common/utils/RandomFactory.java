package common.utils;

import java.security.SecureRandom;
import java.time.Instant;
import java.util.Base64;
import java.util.Random;
import java.util.UUID;
import java.util.concurrent.ThreadLocalRandom;

/**
 * Class that generates random values for testing purposes.
 *
 * @author Jamie Martin
 * @author Perdana Bailey
 */
public class RandomFactory {
    /**
     * Creates a secure session token.
     *
     * @return String The generated token.
     */
    public static String token() {
        // Initialise the libraries and a place to store the randomly generated bytes
        SecureRandom secureRandom = new SecureRandom();
        Base64.Encoder base64Encoder = Base64.getUrlEncoder();
        byte[] randomBytes = new byte[24];

        // Generate the random bytes and return the token as a base64 encoding
        secureRandom.nextBytes(randomBytes);
        return base64Encoder.encodeToString(randomBytes);
    }

    /**
     * Creates a random string.
     *
     * @return String Random string sequence.
     */
    public static String String() {
        return UUID.randomUUID().toString().replace("-", "");
    }

    /**
     * Creates a random boolean.
     *
     * @return boolean True or false.
     */
    public static boolean Boolean() {
        Random random = new Random();
        return random.nextBoolean();
    }

    /**
     * Creates a random integer.
     *
     * @param max The max value to return.
     * @return int A positive integer between 0 and the supplied max.
     */
    public static int Int(int max) {
        Random random = new Random();
        return Math.abs(random.nextInt(max));
    }

    /**
     * Creates a random HEX color as a string.
     *
     * @return String A random HEX color.
     */
    public static String Color() {
        Random random = new Random();
        int rand_num = random.nextInt(0xffffff + 1);
        return String.format("#%06x", rand_num);
    }
}
